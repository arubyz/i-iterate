|| [[#Top Top]] || [[Iterate_toc#SEC_Contents Contents]] || [Index] || [[Iterate_abt#SEC_About  ? ]] ||

= i-iterate developer documentation =

This is the i-iterate developer documentation.

Copyright (C) 2012 Oleg Sivokon

Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved.

i-iterate is a macro system inspired by the Common Lisp [http://common-lisp.net/project/iterate iterate] package. However it deliberately adds, omits or renames parts of the macro, such as to make it more applicable in the context of Emacs Lisp.

The homepage (the code repository, actually) can be found [http://code.google.com/p/i-iterate/ here].

If you found bugs or want a particular feature, you can contact the author [mailto:olegsivokon@gmail.com olegsivokon@gmail.com].

*Rationale*

Iteration is one of the most common tasks a programmer will be facing when writing programs of any complexity. Some iteration patterns are more common then others, but when facing a less common task a programmer would have to re-invent the strategy for solving it. Having these, or just more of these strategies “canned” would be thus helpful for reducing the amount of work and to allow the programmer to better concentrate on the purpose on the program, rather then the technical details. As an example, you can think of a task of iterating over the characters of a string in reverse order.

||  || {{{ (let* ((input "input")        (iterator (1- (length input))))   (while (>= iterator 0)     (write-char (aref input iterator))     (decf iterator))) }}} ||

Notice that in order to do so, you had to create a “technical” variable `iterator` and to perform many “boring” operations that increase the verbosity of your code, hiding the intention.

Compare this to the `++` macro for the same task:

||  || {{{ (++ (for i reverse "input")     (write-char i)) }}} ||

The technical variable `iterator` is now gone, the details of iteration are now gone too. Effectively, it only shows what you need to know about the code.

*General Concepts*

The `++` macro creates special environment, where your code is expanded. In this environment, it declares a number of constructs it interprets in a particular way. Two major categories of these constructs are the *drivers* and *keywords*. Drivers can only occur at the top-level definition, while keywords are generally allowed everywhere, unless otherwise specified.

|| [Iterate_1#Drivers • Drivers] ||  || The top-level forms driving the iteration ||
|| [Iterate_8#Keywords • Keywords] ||  || The forms available inside the iteration ||

----

|| [[#Top Top]] || [[Iterate_toc#SEC_Contents Contents]] || [Index] || [[Iterate_abt#SEC_About  ? ]] ||

This document was generated by _wvxvw_ on _December 12, 2012_ using [http://www.nongnu.org/texi2html/ _texi2html 1.82_].
